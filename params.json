{"name":"Adapt","tagline":"Adapt Intent Parser","body":"Getting Started\r\n===============\r\nTo take a dependency on Adapt, it's recommended to use virtualenv and pip to install source from from github.\r\n\r\n```\r\n$ virtualenv myvirtualenv\r\n$ . myvirtualenv/bin/activate\r\n$ pip install -e git+https://github.com/mycroftai/adapt#egg=adapt-parser\r\n```\r\n\r\nExamples\r\n========\r\nExecutable examples can be found in the [examples folder](https://github.com/MycroftAI/adapt/tree/master/examples).\r\n\r\nOverview\r\n==================\r\nThe Adapt Intent Parser is a flexible and extensible intent definition and determination framework. It is intended to parse natural language text into a structured intent that can then be invoked programatically.\r\n\r\nIntent Modelling\r\n================\r\nIn this context, an Intent is an action the system should perform. In the context of Pandora, we’ll define two actions: List Stations, and Select Station (aka start playback)\r\n\r\nWith the Adapt intent builder:\r\n\r\n```\r\nlist_stations_intent = IntentBuilder('pandora:list_stations')\\\r\n        .require('Browse Music Command')\\\r\n        .build()\r\n```\r\nFor the above, we are describing a “List Stations” intent, which has a single requirement of a “Browse Music Command” entity.\r\n\r\n```\r\nplay_music_command = IntentBuilder('pandora:select_station')\\\r\n        .require('Listen Command')\\\r\n        .require('Pandora Station')\\\r\n        .optionally('Music Keyword')\\\r\n        .build()\r\n```\r\nFor the above, we are describing a “Select Station” (aka start playback) intent, which requires a “Listen Command” entity, a “Pandora Station”, and optionally a “Music Keyword” entity.\r\n\r\nEntities\r\n========\r\n\r\nEntities are a named value. Examples include:\r\nBlink 182 is an Artist\r\nThe Big Bang Theory is a Television Show\r\nPlay is a Listen Command\r\nSong(s) is a Music Keyword\r\n\r\nFor my Pandora implementation, there is a static set of vocabulary for Browse Music Command, Listen Command, and Music Keyword (defined by me, a native english speaker and all-around good guy). Pandora Station entities are populated via a list stations API call to Pandora. Here’s what the vocabulary registration looks like.\r\n\r\n```\r\ndef register_vocab(entity_type, entity_value):\r\n    # a tiny bit of code \r\n\r\ndef register_pandora_vocab(emitter):\r\n    for v in [\"stations\"]:\r\n        register_vocab('Browse Music Command', v)\r\n\r\n    for v in [\"play\", \"listen\", \"hear\"]:\r\n        register_vocab('Listen Command', v)\r\n\r\n    for v in [\"music\", \"radio\"]:\r\n        register_vocab('Music Keyword', v)\r\n\r\n    for v in [\"Pandora\"]:\r\n        register_vocab('Plugin Name', v)\r\n\r\n    station_name_regex = re.compile(r\"(.*) Radio\")\r\n    p = get_pandora()\r\n    for station in p.stations:\r\n        m = station_name_regex.match(station.get('stationName'))\r\n        if not m:\r\n            continue\r\n        for match in m.groups():\r\n            register_vocab('Pandora Station', match)\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}